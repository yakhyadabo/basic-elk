input {
	syslog {
		type => syslog
		port => 25826

	   codec => multiline {
      	pattern => "^ "
   	   what => "previous"
    }   
	}
}


filter {
   if "docker/" in [program] {
      mutate {
         gsub => ["message", "#011", " "]
         gsub => ["message", "#012", " "]
      }

      multiline {    
         # Java stack trace filter       
         # Each log entry begin with a timestamp (or posint + Syslogtimestamp).This make the timestamp the best way to detect the beginning of an event.
         pattern => "(^%{TIMESTAMP_ISO8601})|(^<%{POSINT}>%{SYSLOGTIMESTAMP})"
         negate => true
         what => previous
      }

      grok {
          match => [ "message", "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP}%{SPACE}%{SYSLOGPROG}:%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}%{NUMBER}%{SPACE}--- %{SPACE}(?:\[%{SPACE}%{DATA: threadname}\])?%{SPACE}%{JAVACLASS:classname}%{SPACE}:%{SPACE}%{GREEDYDATA:logmessage}" ]
         overwrite => [ "message" ]      
      }

      mutate {
        add_field => { "application" => "%{program}" } 
      }

      mutate {
        gsub => [ "application", "docker/", "" ]
      }

      mutate {
        update => [ "program", "docker" ]
      }

      date {
         locale => "en"
         match => ["timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
         target => "@timestamp"
         remove_field => ["timestamp"]   
      }

   }
}


output {
	stdout {
		codec => rubydebug
	}
	elasticsearch {
		hosts => db
		index => "smart"
	}
}
